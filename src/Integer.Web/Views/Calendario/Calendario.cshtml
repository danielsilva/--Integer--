@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@model Integer.Web.ViewModels.EventoViewModel

@section Styles {
    <link href="@Url.Content("~/Content/extCalendar/css/extensible-all.css")" rel="stylesheet" type="text/css" />
    <link href="@Url.Content("~/Content/Event.css")" rel="stylesheet" type="text/css" />   
    <style type="text/css" rel="stylesheet">
        .ext-cal-evt
        {
            padding: 1px 1px 1px 5px !important;
            }
        .ext-cal-ev-spanleft
        {
            margin-left:0px !important;
            }        
        .ext-cal-ev-spanright
        {
            float:none !important;
            margin-left:0px !important;
            }
        .ext-cal-ev-spanboth 
        {
            float:none !important;
            margin-left:0px !important;
            }
        .ext-evt-block
        {
            display: block !important;
            }
    </style>
}
    
@section Scripts {    
    <script src="@Url.Content("~/Scripts/Plugins/extCalendar/extensible-core.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/Plugins/extCalendar/recurrence-debug.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/Plugins/extCalendar/calendar-debug.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/Plugins/extCalendar/locale/ext-lang-pt_BR.js")" type="text/javascript"></script>
    <script type="text/javascript">
        $().ready(function () {
            $('#btnSchedule').click(function () {
                $('#divFormEvent').modal('show');
            });

            setDateTimePicker();

            $('#timeMorning').tooltip({ placement: 'top', title: '6h às 12h' });
            $('#timeAfternoon').tooltip({ placement: 'top', title: '12h às 18h' });
            $('#timeEvening').tooltip({ placement: 'top', title: '18h às 22h' });
        });

        Ext.onReady(function () {
            var getEvents = $.getJSON('@Url.Action("Eventos", "Calendario")');

            var calendarWidth = 810;
            var startDate = new Date();

            getEvents.success(function (events) {
                Ext.create('Extensible.calendar.CalendarPanel', {
                    eventStore: Ext.create('Extensible.calendar.data.MemoryEventStore', {
                        data: events
                    }),
                    startDate: startDate,
                    renderTo: 'divCalendar',
                    width: calendarWidth,
                    height: 520,

                    readOnly: false,

                    showMultiWeekView: false,
                    showNavJump: true,

                    todayText: 'Hoje',
                    jumpToText: 'Navegar:',
                    goText: 'Ir',
                    dayText: 'Dia',
                    weekText: 'Semana',
                    monthText: 'Mês',

                    listeners: {
                        'datechange': {
                            fn: function (panel, startDate, viewSart, viewEnd) {
                                setCalendarTitle(startDate);
                            },
                            scope: this
                        },
                        'dayclick': {
                            fn: function (panel, date, allDay, el) {
                                showFormEvent(date, el);
                                return false;
                            },
                            scope: this
                        }
                    }
                });
            });

            $("#calendarTitle").width(calendarWidth);
            $("#divCalendar").width(calendarWidth);

            setCalendarTitle(startDate);
        });

        function setCalendarTitle(date) {
            $("#calendarTitle").html(Ext.Date.format(date, 'F'));
        }

        function setDateTimePicker() {
            $.each($(".dateField"), function () {
                $(this).datepicker({
                    prevText: '',
                    nextText: ''
                });
            });
            $.each($(".datetimeField"), function() {
                $(this).datetimepicker({
                    hourMin: 7,
                    hourMax: 22,
                    hourGrid: 2,
                    minuteGrid: 10,
                    prevText: '',
                    nextText: ''
                });
            });
        }
    </script>
}

<div id="divCalendar" style="margin-left:auto; margin-right:auto;">
    <button id="btnSchedule" class="btn btn-info btn-large" >Agendar evento</button>
    <h3 id="calendarTitle" style="text-align:center; margin-left:auto; margin-right:auto;"></h3>
</div>

<div id="divFormEvent" class="modal hide" style="width:750px;">
    @using (Html.BeginForm("Save", "Calendario", FormMethod.Post, new { id = "frmEvent", @class = "well" })) { 
        <div class="row">
            <div class="span3">
                <label>Nome @Html.ValidationMessageFor(m => m.Nome)</label>
                @Html.TextBoxFor(m => m.Nome, new { @class = "span3" })
                
                <label>Descrição @Html.ValidationMessageFor(m => m.Descricao)</label>
                @Html.TextAreaFor(m => m.Descricao, new { @class = "input-xlarge span3", style="height:84px;", rows = 4, placeholder = "ex.: 'telefones p/ contato', 'venha com a blusa do grupo', 'endereço' etc" })
            </div>
            <div class="span3">
                <label>Tipo @Html.ValidationMessageFor(m => m.Tipo)</label>
                @Html.DropDownListFor(m => m.Tipo, new SelectList(ViewBag.Tipos, "Id", "Nome"), "Selecione", new { @class = "span3" })
                
                <label>Começa em @Html.ValidationMessageFor(m => m.DataInicio)</label>
                <div class="span3" style="margin:0px;">
                    @Html.TextBoxFor(m => m.DataInicio, new { id = "txtDateBegin", size = 16, @class = "datetimeField span2" })
                </div>
                
                <label>Termina em @Html.ValidationMessageFor(m => m.DataFim)</label>
                <div class="span3" style="margin:0px;">
                    @Html.TextBoxFor(m => m.DataFim, new { id = "txtDateEnd", size = 16, @class = "datetimeField span2" })
                </div>
            </div>
        </div>
        <div class="row" style="margin: 10px 0px 10px 0px;">
            <div class="span3">
                <button class="btn btn-info dropdown-toggle" data-toggle="dropdown">Reservar Locais <span class="caret"></span></button>
            </div>
        </div>
        <div class="row">
            <button class="close">&times;</button>
            <div class="span3">
                <label>Local @Html.ValidationMessageFor(m => m.Nome)</label>
                <input type=text class="span3" />
            </div>
            <div class="span1" style="width:95px;">
                <label>Dia @Html.ValidationMessageFor(m => m.Nome)</label>
                <input type="text" name="reserveDate" class="dateField span1" />
            </div>
            <div class="span2">
                <label style="width:100%;font-size:12px;">&nbsp;@Html.ValidationMessageFor(m => m.Nome)</label>
                <div class="btn-group clearfix" data-toggle="buttons-checkbox">
                  <button type="button" id="timeMorning" class="btn btn-small">Manhã</button>
                  <button type="button" id="timeAfternoon" class="btn btn-small">Tarde</button>
                  <button type="button" id="timeEvening" class="btn btn-small">Noite</button>
                </div>
            </div>
        </div>
        <div class="row" style="margin-top:20px;">
            <div class="modal-footer">
                <a href="#" data-dismiss="modal">Cancelar</a>
                <button type="submit" data-loading-text="Salvando..." class="btn btn-primary" style="margin-left:20px;">Salvar</button>
            </div>
        </div>
    }
</div>

